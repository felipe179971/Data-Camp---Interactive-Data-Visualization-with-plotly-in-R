[
["index.html", "Data Camp - Interactive Data Visualization with plotly in R Chapter 1 Introdução", " Data Camp - Interactive Data Visualization with plotly in R Felipe da Rocha Ferreira 2020-07-30 Chapter 1 Introdução Os gráficos interativos permitem manipular dados plotados para obter mais informações. Como exemplo, um gráfico interativo permitiria ampliar um subconjunto de seus dados sem a necessidade de criar um novo gráfico. Neste curso, você aprenderá como criar e personalizar gráficos interativos em plotagem usando a linguagem de programação R. Ao longo do caminho, você revisará as práticas recomendadas de visualização de dados e será apresentado a novos tipos de plotagem, como matrizes de gráficos de dispersão e gráficos de dispersão em bin. "],
["carregando-pacotes.html", "Chapter 2 Carregando pacotes", " Chapter 2 Carregando pacotes library(plotly) ## Loading required package: ggplot2 ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(ggplot2) library(forcats) "],
["introducao-ao-plotly.html", "Chapter 3 Introdução ao plotly 3.1 O que é Plotly? 3.2 Gráficos univariados 3.3 Gráficos bivariados", " Chapter 3 Introdução ao plotly 3.1 O que é Plotly? 3.1.1 Convertendo um gráfico de dispersão ggplot2 O ggplotly() comando facilita a criação de versões interativas da maioria dos gráficos estáticos criados usando o ggplot2 pacote. Neste exercício, sua tarefa é criar uma versão interativa do gráfico de dispersão abaixo, explorando a relação entre as vendas de videogames na América do Norte (NA_sales) e a pontuação crítica agregada (Critic_Score) em 2016. Depois de criar o gráfico interativo, certifique-se de explorar quais interações são possíveis. Nota: o carregamento plotly também carrega ggplot2 e dplyr . vgsales&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/vgsales.csv&quot;,sep=&#39;;&#39;) #Carregar plotly #Crie um gráfico de dispersão com NA_Sales no eixo x e no eixo Critic_Score y para jogos de vídeo encontrados no vgsales conjunto de dados de 2016. Armazene esse gráfico no scatter objeto. scatter&lt;-vgsales%&gt;%filter(Year==2016)%&gt;%ggplot(aes(x = NA_Sales, y = Critic_Score)) + geom_point(alpha = 0.3) #Use o ggplotly()comando para converter scatterem um plotly gráfico interativo. ggplotly(scatter) rm(scatter) 3.2 Gráficos univariados 3.2.1 Histogramas Neste exercício, você utilizará plotly para criar um histograma do zero, a fim de explorar a distribuição das pontuações críticas dos videogames vendidos entre 1980 e 2016. Os dados estão contidos na Critic_Score variável no vgsales quadro de dados. Ao concluir este exercício, pense em como os compartimentos influenciam o que você vê na distribuição das pontuações dos críticos. #Crie um histograma da pontuação do crítico ( Critic_Score) usando o número padrão de posições. vgsales%&gt;%plot_ly(x=~Critic_Score)%&gt;%add_histogram() ## Warning: Ignoring 8467 observations #Crie um histograma da pontuação do crítico ( Critic_Score) definindo o número máximo de posições para 25. vgsales%&gt;%plot_ly(x=~Critic_Score)%&gt;%add_histogram(nbisx=25) ## Warning: Ignoring 8467 observations ## Warning: &#39;histogram&#39; objects don&#39;t have these attributes: &#39;nbisx&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;meta&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;uirevision&#39;, &#39;x&#39;, &#39;y&#39;, &#39;text&#39;, &#39;hovertext&#39;, &#39;orientation&#39;, &#39;histfunc&#39;, &#39;histnorm&#39;, &#39;cumulative&#39;, &#39;nbinsx&#39;, &#39;xbins&#39;, &#39;nbinsy&#39;, &#39;ybins&#39;, &#39;autobinx&#39;, &#39;autobiny&#39;, &#39;bingroup&#39;, &#39;hovertemplate&#39;, &#39;marker&#39;, &#39;offsetgroup&#39;, &#39;alignmentgroup&#39;, &#39;selected&#39;, &#39;unselected&#39;, &#39;_deprecated&#39;, &#39;error_x&#39;, &#39;error_y&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;xaxis&#39;, &#39;yaxis&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;metasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;textsrc&#39;, &#39;hovertextsrc&#39;, &#39;hovertemplatesrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; #Crie um histograma da pontuação do crítico ( Critic_Score) configurando a largura da bandeja para 10, começando em 0 e terminando em 100. vgsales%&gt;%plot_ly(x=~Critic_Score)%&gt;%add_histogram(nbisx=list(start=0, end=100, size=10)) ## Warning: Ignoring 8467 observations ## Warning: &#39;histogram&#39; objects don&#39;t have these attributes: &#39;nbisx&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;meta&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;uirevision&#39;, &#39;x&#39;, &#39;y&#39;, &#39;text&#39;, &#39;hovertext&#39;, &#39;orientation&#39;, &#39;histfunc&#39;, &#39;histnorm&#39;, &#39;cumulative&#39;, &#39;nbinsx&#39;, &#39;xbins&#39;, &#39;nbinsy&#39;, &#39;ybins&#39;, &#39;autobinx&#39;, &#39;autobiny&#39;, &#39;bingroup&#39;, &#39;hovertemplate&#39;, &#39;marker&#39;, &#39;offsetgroup&#39;, &#39;alignmentgroup&#39;, &#39;selected&#39;, &#39;unselected&#39;, &#39;_deprecated&#39;, &#39;error_x&#39;, &#39;error_y&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;xaxis&#39;, &#39;yaxis&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;metasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;textsrc&#39;, &#39;hovertextsrc&#39;, &#39;hovertemplatesrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; 3.2.2 Gráficos de barra Neste exercício, você usará plotly para criar um gráfico de barras do zero, a fim de explorar a distribuição dos gêneros de videogame representados nos jogos vendidos entre 1980 e 2016. Os dados para esse gráfico de barras estão contidos na Genre coluna do vgsales quadro de dados. # Use count()para criar uma tabela de frequências de Genre. genre_table &lt;- vgsales%&gt;%count(Genre) ## Warning: Factor `Genre` contains implicit NA, consider using ## `forcats::fct_explicit_na` #Ou genre_table &lt;- as.data.frame.table(table(vgsales$Genre)) #Use genre_table para criar um gráfico de barras de Genre genre_table%&gt;%plot_ly(x=~Var1,y=~Freq)%&gt;%add_bars()%&gt;%layout(title = &quot;Gráfico de barras&quot;,xaxis = list(title = &quot;Genre&quot;),yaxis = list(title = &quot;n&quot;)) #Reordene o gráfico de barras em ordem decrescente (da barra mais alta para a menor) para melhorar a legibilidade. (Ordenar/Reordenar gráfico de barras) genre_table %&gt;% mutate(Var1 = fct_reorder(Var1, Freq,.desc = T)) %&gt;% plot_ly(x = ~Var1, y = ~Freq) %&gt;% add_bars()%&gt;%layout(title = &quot;Gráfico de barras Ordenado&quot;,xaxis = list(title = &quot;Genre&quot;),yaxis = list(title = &quot;n&quot;)) rm(genre_table) 3.3 Gráficos bivariados 3.3.1 Um primeiro gráfico de dispersão Os jogadores e críticos de videogame classificam os jogos da mesma forma? Neste exercício, você criará um gráfico de dispersão plotly para explorar a relação entre a pontuação média do jogador (User_Score) e a pontuação média do crítico ( Critic_Score). Se você vir algo incomum, não deixe de utilizar as ferramentas interativas, como informações instantâneas, para investigar. #Crie um gráfico de dispersão com a pontuação crítica ( Critic_Score) no eixo x e a pontuação do usuário ( User_Score) no eixo y. vgsales%&gt;%plot_ly(x=~Critic_Score,y=~User_Score)%&gt;%add_markers()%&gt;%layout(title=&#39;Gráfico de dispersão&#39;,xaxis=list(title=&#39; Nota dos Críticos de Videogame&#39;),yaxis=list(title=&#39;Notas dos Jogadores de Videogame&#39;)) ## Warning: Ignoring 8500 observations 3.3.2 Um primeiro gráfico de barras empilhadas Neste exercício, sua tarefa é criar um gráfico de barras empilhadas para investigar se há uma associação entre os jogos Genre e os Rating de vídeo. Certifique-se de investigar o que acontece quando você clica nas amostras de cores na legenda. #Crie um gráfico de barras empilhadas com Genreo eixo x e Ratinguse para colorir as barras. (Ano de 2016) # Filter out the 2016 video games vgsales%&gt;%filter(Year==2016)%&gt;%count(Genre, Rating)%&gt;%plot_ly(x = ~Genre, y = ~n, color = ~Rating)%&gt;%add_bars() %&gt;%layout(barmode = &quot;stack&quot;,title=&#39;Gráfico de Barras Empilhado&#39;, xaxis=list(title=&#39;Gênero&#39;), yaxis=list(title=&#39;Frequência&#39;)) ## Warning: Factor `Rating` contains implicit NA, consider using ## `forcats::fct_explicit_na` #Ou usando Table (melhor fazer com count) vgsales_2016&lt;-vgsales%&gt;%filter(Year==2016) vgsales_2016&lt;-as.data.frame.table(table(vgsales_2016$Genre, vgsales_2016$Rating)) vgsales_2016&lt;-vgsales_2016%&gt;%filter(Freq!=0) colnames(vgsales_2016)&lt;-c(&#39;Genre&#39;,&#39;Rating&#39;,&#39;n&#39;) vgsales_2016%&gt;%plot_ly(x = ~Genre, y = ~n, color = ~Rating)%&gt;%add_bars() %&gt;%layout(barmode = &quot;stack&quot;,title=&#39;Gráfico de Barras Empilhado&#39;, xaxis=list(title=&#39;Gênero&#39;), yaxis=list(title=&#39;Frequência&#39;)) #Apagando data.frame provisório rm(vgsales_2016) 3.3.3 Boxplots Neste exercício, sua tarefa é criar um boxplot de vendas globais de videogame (o número de unidades vendidas) para cada gênero. O gênero parece estar relacionado às vendas? Certifique-se de explorar quais informações de foco são fornecidas por padrão. #Crie gráficos de caixas lado a lado com Global_Saleso eixo xe o eixo Genrey. (Ano de 2016) vgsales%&gt;%filter(Year==2016)%&gt;%plot_ly(x=~Global_Sales,y=~Genre)%&gt;%add_boxplot()%&gt;%layout(title=&#39;Boxplot&#39;,xaxis=list(title=&#39;Número de Unidades Vendidas&#39;),yaxis=list(title=&#39;Gênero&#39;)) "],
["modelando-e-personalizando-seus-graficos.html", "Chapter 4 Modelando e personalizando seus gráficos 4.1 Personalize seus traços 4.2 Uso atencioso da cor 4.3 Informação instantânea 4.4 Personalizando seu layout", " Chapter 4 Modelando e personalizando seus gráficos 4.1 Personalize seus traços 4.1.1 Cor e opacidade Aumentar a transparência (ou seja, diminuir a opacidade) de um rastreamento pode ajudar a melhorar sua legibilidade. Por exemplo, se houver barras de alturas semelhantes em gráficos de barras ou histogramas, aumentar a transparência permite ver as linhas de grade horizontais atrás das barras, facilitando o julgamento das alturas relativas. Obviamente, as informações instantâneas podem esclarecer isso, mas por que não facilitar o máximo possível para o seu leitor? Neste exercício, você adaptará o plotly código para alterar a cor de um histograma e aumentar sua transparência. #Adapte o código para que as barras do histograma sejam &quot;navy&quot;e sejam 50% transparentes. vgsales2016&lt;-vgsales%&gt;%filter(Year==2016) vgsales2016%&gt;%plot_ly(x=~Critic_Score)%&gt;%add_histogram(color=I(&#39;navy&#39;),opacity = 0.5)%&gt;%layout(title=&#39;Histograma com cor navy e 50% de transparência&#39;, xaxis=list(title=&#39;Notas dos Críticos de Videogame (2016)&#39;)) ## Warning: Ignoring 270 observations 4.1.2 Formatos alternativos de cores R tem um grande número de cores nomeadas, mas às vezes você precisa de uma cor que não seja nomeada. Por exemplo, e se o tom específico de azul da sua organização estiver entre “navy” e “dodgerblue4”? Felizmente, plotly permite especificar cores usando outros formatos, incluindo RGB, RGBA, HEX, HCL, HSL e HSV. Neste exercício, você alterará a cor do histograma para usar os formatos HEX e RGB. #Use a função as is para definir coloro histograma como #111e6c. vgsales2016%&gt;%plot_ly(x=~Critic_Score)%&gt;%add_histogram(color=I(&#39;#111e6c&#39;), opacity=1)%&gt;%layout(title=&#39;Histograma com cor #111e6c&#39;,xaxis=list(title=&#39;Notas dos Críticos de Videogame (2016)&#39;)) ## Warning: Ignoring 270 observations #Defina o histograma colorcomo &quot;rgb(17, 30, 108)&quot;através do markerargumento. vgsales2016%&gt;%plot_ly(x=~Critic_Score)%&gt;%add_histogram(marker=list(color=&quot;rgb(17, 30, 108)&quot;,opacity=1))%&gt;%layout(title=&#39;Histograma com cor rgb(17, 30, 108)&#39;,xaxis=list(title=&#39;Notas dos Críticos de Videogame (2016)&#39;)) ## Warning: Ignoring 270 observations 4.1.3 Tamanho e símbolo Para alterar o tamanho e a forma padrão dos pontos em um gráfico de dispersão ou em caixa, passamos ao marker argumento uma lista com os argumentos size e symbol. Como você viu, alterar o símbolo de plotagem pode facilitar a leitura dos gráficos, abordando questões como a super plotagem. Diminuir o tamanho dos pontos também pode ajudar a superar pequenos problemas de overplotting - apenas não torne os pontos difíceis de ver! #Altere o símbolo de plotagem para um diamante e diminua o tamanho para 4. vgsales2016%&gt;%plot_ly(x=~User_Score,y=~Critic_Score)%&gt;%add_markers(marker=list(symbol=&#39;diamond&#39;,size=4))%&gt;%layout(title=&#39;Gráfico de dispersão com marker diamonde tamanho 4&#39;,xaxis=list(title=&#39;Nota dos Críticos de Videogame&#39;),yaxis=list(title=&#39;Notas dos Jogadores de Videogame&#39;)) ## Warning: Ignoring 270 observations 4.2 Uso atencioso da cor 4.2.1 Adicionando uma terceira variável Neste exercício, você adicionará cor a um gráfico de dispersão com base em uma terceira variável, em um esforço para explorar a relação entre a pontuação do usuário e a pontuação crítica dos videogames em 2016. #Altere a cor e o símbolo do marcador no gráfico de dispersão da pontuação do usuário ( User_Score) contra a pontuação do crítico ( Critic_Score) para representar Genre. #Use Dark2 emvez da paleta de cores padrão. vgsales2016%&gt;%plot_ly(x=~Critic_Score,y=~User_Score,color=~Genre)%&gt;%add_markers(colors=&#39;Dark2&#39;)%&gt;%layout(title=&#39;Gráfico de dispersão com paleta de cores Dark2 variando de acordo com Genre&#39;,xaxis=list(title=&#39;Nota dos Críticos de Videogame&#39;),yaxis=list(title=&#39;Notas dos Jogadores de Videogame&#39;)) ## Warning: Ignoring 270 observations 4.2.2 Além da cor: Símbolos Usar cor e forma para codificar uma variável categórica pode ser uma estratégia útil para revelar relacionamentos com mais eficácia. Essa estratégia de codificação dupla usa duas pistas visuais pré-atentas para comunicar mais rapidamente as informações ao leitor. Essa ideia é implementada por padrão em plotly; se você mapear uma variável para o símbolo, plotly mapeia automaticamente a variável para a cor. Para mapear uma variável para a forma de plotagem, adicione um symbol argumento ao plot_ly() comando. Cuidado: É uma prática inadequada usar cor e forma para comunicar variáveis diferentes, pois os dois recursos demonstraram interferir entre si, dificultando a distinção entre as duas variáveis. #Crie um gráfico de dispersão com Critic_Score no eixo x e no eixo User_Scorey onde o símbolo de plotagem representa o jogo Rating. vgsales2016%&gt;%plot_ly(x=~Critic_Score,y=~User_Score,symbol=~Rating)%&gt;%add_markers(colors=&#39;Dark2&#39;)%&gt;%layout(title=&#39;Gráfico de dispersão com symbol variando de acordo com Rating&#39;,xaxis=list(title=&#39;Nota dos Críticos de Videogame&#39;),yaxis=list(title=&#39;Notas dos Jogadores de Videogame&#39;)) ## Warning: Ignoring 270 observations ## Warning: The shape palette can deal with a maximum of 6 discrete values ## because more than 6 becomes difficult to discriminate; you have 8. ## Consider specifying shapes manually if you must have them. ## Warning: The following are not valid symbol codes: ## &#39;NA&#39; ## Valid symbols include: ## &#39;0&#39;, &#39;circle&#39;, &#39;100&#39;, &#39;circle-open&#39;, &#39;200&#39;, &#39;circle-dot&#39;, &#39;300&#39;, &#39;circle-open-dot&#39;, &#39;1&#39;, &#39;square&#39;, &#39;101&#39;, &#39;square-open&#39;, &#39;201&#39;, &#39;square-dot&#39;, &#39;301&#39;, &#39;square-open-dot&#39;, &#39;2&#39;, &#39;diamond&#39;, &#39;102&#39;, &#39;diamond-open&#39;, &#39;202&#39;, &#39;diamond-dot&#39;, &#39;302&#39;, &#39;diamond-open-dot&#39;, &#39;3&#39;, &#39;cross&#39;, &#39;103&#39;, &#39;cross-open&#39;, &#39;203&#39;, &#39;cross-dot&#39;, &#39;303&#39;, &#39;cross-open-dot&#39;, &#39;4&#39;, &#39;x&#39;, &#39;104&#39;, &#39;x-open&#39;, &#39;204&#39;, &#39;x-dot&#39;, &#39;304&#39;, &#39;x-open-dot&#39;, &#39;5&#39;, &#39;triangle-up&#39;, &#39;105&#39;, &#39;triangle-up-open&#39;, &#39;205&#39;, &#39;triangle-up-dot&#39;, &#39;305&#39;, &#39;triangle-up-open-dot&#39;, &#39;6&#39;, &#39;triangle-down&#39;, &#39;106&#39;, &#39;triangle-down-open&#39;, &#39;206&#39;, &#39;triangle-down-dot&#39;, &#39;306&#39;, &#39;triangle-down-open-dot&#39;, &#39;7&#39;, &#39;triangle-left&#39;, &#39;107&#39;, &#39;triangle-left-open&#39;, &#39;207&#39;, &#39;triangle-left-dot&#39;, &#39;307&#39;, &#39;triangle-left-open-dot&#39;, &#39;8&#39;, &#39;triangle-right&#39;, &#39;108&#39;, &#39;triangle-right-open&#39;, &#39;208&#39;, &#39;triangle-right-dot&#39;, &#39;308&#39;, &#39;triangle-right-open-dot&#39;, &#39;9&#39;, &#39;triangle-ne&#39;, &#39;109&#39;, &#39;triangle-ne-open&#39;, &#39;209&#39;, &#39;triangle-ne-dot&#39;, &#39;309&#39;, &#39;triangle-ne-open-dot&#39;, &#39;10&#39;, &#39;triangle-se&#39;, &#39;110&#39;, &#39;triangle-se-open&#39;, &#39;210&#39;, &#39;triangle-se-dot&#39;, &#39;310&#39;, &#39;triangle-se-open-dot&#39;, &#39;11&#39;, &#39;triangle-sw&#39;, &#39;111&#39;, &#39;triangle-sw-open&#39;, &#39;211&#39;, &#39;triangle-sw-dot&#39;, &#39;311&#39;, &#39;triangle-sw-open-dot&#39;, &#39;12&#39;, &#39;triangle-nw&#39;, &#39;112&#39;, &#39;triangle-nw-open&#39;, &#39;212&#39;, &#39;triangle-nw-dot&#39;, &#39;312&#39;, &#39;triangle-nw-open-dot&#39;, &#39;13&#39;, &#39;pentagon&#39;, &#39;113&#39;, &#39;pentagon-open&#39;, &#39;213&#39;, &#39;pentagon-dot&#39;, &#39;313&#39;, &#39;pentagon-open-dot&#39;, &#39;14&#39;, &#39;hexagon&#39;, &#39;114&#39;, &#39;hexagon-open&#39;, &#39;214&#39;, &#39;hexagon-dot&#39;, &#39;314&#39;, &#39;hexagon-open-dot&#39;, &#39;15&#39;, &#39;hexagon2&#39;, &#39;115&#39;, &#39;hexagon2-open&#39;, &#39;215&#39;, &#39;hexagon2-dot&#39;, &#39;315&#39;, &#39;hexagon2-open-dot&#39;, &#39;16&#39;, &#39;octagon&#39;, &#39;116&#39;, &#39;octagon-open&#39;, &#39;216&#39;, &#39;octagon-dot&#39;, &#39;316&#39;, &#39;octagon-open-dot&#39;, &#39;17&#39;, &#39;star&#39;, &#39;117&#39;, &#39;star-open&#39;, &#39;217&#39;, &#39;star-dot&#39;, &#39;317&#39;, &#39;star-open-dot&#39;, &#39;18&#39;, &#39;hexagram&#39;, &#39;118&#39;, &#39;hexagram-open&#39;, &#39;218&#39;, &#39;hexagram-dot&#39;, &#39;318&#39;, &#39;hexagram-open-dot&#39;, &#39;19&#39;, &#39;star-triangle-up&#39;, &#39;119&#39;, &#39;star-triangle-up-open&#39;, &#39;219&#39;, &#39;star-triangle-up-dot&#39;, &#39;319&#39;, &#39;star-triangle-up-open-dot&#39;, &#39;20&#39;, &#39;star-triangle-down&#39;, &#39;120&#39;, &#39;star-triangle-down-open&#39;, &#39;220&#39;, &#39;star-triangle-down-dot&#39;, &#39;320&#39;, &#39;star-triangle-down-open-dot&#39;, &#39;21&#39;, &#39;star-square&#39;, &#39;121&#39;, &#39;star-square-open&#39;, &#39;221&#39;, &#39;star-square-dot&#39;, &#39;321&#39;, &#39;star-square-open-dot&#39;, &#39;22&#39;, &#39;star-diamond&#39;, &#39;122&#39;, &#39;star-diamond-open&#39;, &#39;222&#39;, &#39;star-diamond-dot&#39;, &#39;322&#39;, &#39;star-diamond-open-dot&#39;, &#39;23&#39;, &#39;diamond-tall&#39;, &#39;123&#39;, &#39;diamond-tall-open&#39;, &#39;223&#39;, &#39;diamond-tall-dot&#39;, &#39;323&#39;, &#39;diamond-tall-open-dot&#39;, &#39;24&#39;, &#39;diamond-wide&#39;, &#39;124&#39;, &#39;diamond-wide-open&#39;, &#39;224&#39;, &#39;diamond-wide-dot&#39;, &#39;324&#39;, &#39;diamond-wide-open-dot&#39;, &#39;25&#39;, &#39;hourglass&#39;, &#39;125&#39;, &#39;hourglass-open&#39;, &#39;26&#39;, &#39;bowtie&#39;, &#39;126&#39;, &#39;bowtie-open&#39;, &#39;27&#39;, &#39;circle-cross&#39;, &#39;127&#39;, &#39;circle-cross-open&#39;, &#39;28&#39;, &#39;circle-x&#39;, &#39;128&#39;, &#39;circle-x-open&#39;, &#39;29&#39;, &#39;square-cross&#39;, &#39;129&#39;, &#39;square-cross-open&#39;, &#39;30&#39;, &#39;square-x&#39;, &#39;130&#39;, &#39;square-x-open&#39;, &#39;31&#39;, &#39;diamond-cross&#39;, &#39;131&#39;, &#39;diamond-cross-open&#39;, &#39;32&#39;, &#39;diamond-x&#39;, &#39;132&#39;, &#39;diamond-x-open&#39;, &#39;33&#39;, &#39;cross-thin&#39;, &#39;133&#39;, &#39;cross-thin-open&#39;, &#39;34&#39;, &#39;x-thin&#39;, &#39;134&#39;, &#39;x-thin-open&#39;, &#39;35&#39;, &#39;asterisk&#39;, &#39;135&#39;, &#39;asterisk-open&#39;, &#39;36&#39;, &#39;hash&#39;, &#39;136&#39;, &#39;hash-open&#39;, &#39;236&#39;, &#39;hash-dot&#39;, &#39;336&#39;, &#39;hash-open-dot&#39;, &#39;37&#39;, &#39;y-up&#39;, &#39;137&#39;, &#39;y-up-open&#39;, &#39;38&#39;, &#39;y-down&#39;, &#39;138&#39;, &#39;y-down-open&#39;, &#39;39&#39;, &#39;y-left&#39;, &#39;139&#39;, &#39;y-left-open&#39;, &#39;40&#39;, &#39;y-right&#39;, &#39;140&#39;, &#39;y-right-open&#39;, &#39;41&#39;, &#39;line-ew&#39;, &#39;141&#39;, &#39;line-ew-open&#39;, &#39;42&#39;, &#39;line-ns&#39;, &#39;142&#39;, &#39;line-ns-open&#39;, &#39;43&#39;, &#39;line-ne&#39;, &#39;143&#39;, &#39;line-ne-open&#39;, &#39;44&#39;, &#39;line-nw&#39;, &#39;144&#39;, &#39;line-nw-open 4.2.3 Transformando uma escala de cores Ao mapear uma variável numérica para cores, às vezes é necessário transformar a variável. Isso é especialmente verdadeiro se os valores das variáveis diferirem por uma ordem de magnitude ou mais. Neste exercício, você explorará como o número de usuários ajuda a explicar a relação entre as pontuações de usuários e críticos para videogames em 2016. Além disso, você explorará como a aplicação do log natural pode ajudar a tornar uma escala de cores mais interpretável. #Crie um gráfico de dispersão de User_Score contra Critic_Score, onde a cor representa User_Count. vgsales2016$User_Score&lt;-as.numeric(vgsales2016$User_Score) vgsales2016%&gt;%plot_ly(x=~Critic_Score, y=~User_Score, color=~User_Count)%&gt;%add_markers()%&gt;%layout(title=&#39;Gráfico de Dispersão onde a cor representa User_Count.&#39;,xaxis=list(title=&#39;Nota dos Críticos de Videogame&#39;),yaxis=list(title=&#39;Número de Usuários&#39;)) ## Warning: Ignoring 270 observations #Recrie o gráfico de dispersão da pontuação do usuário contra a pontuação do crítico, mas a cor representa o log natural da contagem de usuários. vgsales2016%&gt;%plot_ly(x=~Critic_Score, y=~User_Score, color=~log(User_Count))%&gt;%add_markers()%&gt;%layout(title=&#39;Gráfico de Dispersão onde a cor representa log(User_Count)&#39;,xaxis=list(title=&#39;Nota dos Críticos de Videogame&#39;),yaxis=list(title=&#39;Número de Usuários&#39;)) ## Warning: Ignoring 270 observations 4.3 Informação instantânea \\(hoverinfo =&quot;all&quot;, &quot;x&quot;, &quot;y&quot;, &quot;x+y&quot;, &quot;x+y+z&quot;\\) 4.3.1 Removendo um pedaço de informação instantânea Para alguns tipos de gráfico, talvez você não queira todas as informações de foco exibidas por padrão. Os gráficos de barras são um excelente exemplo. Você pode ler facilmente os valores de agrupamento em um gráfico de barras, portanto, apenas exibir a altura da barra parece razoável. Neste exercício, sua tarefa é remover os rótulos da plataforma das informações instantâneas do gráfico de barras que exibe o número de jogos lançados para cada plataforma em 2016. #Crie um gráfico de barras mostrando como os jogos são distribuídos pelas plataformas no vgsales2016 conjunto de dados. #Use o hoverinfo argumento para exibir apenas a altura de cada barra. vgsales2016%&gt;%count(Platform)%&gt;%plot_ly(x=~Platform, y=~n, hoverinfo=&#39;y&#39;)%&gt;%add_bars()%&gt;%layout(title=&#39;Gráfico de Barras hoverinfo=y&#39;,xaxis=list(title=&#39;Plataformas&#39;),yaxis=list(title=&#39;&#39;)) 4.3.2 Adicionando ao hoverinfo Durante a vídeo aula, você aprendeu como personalizar completamente as informações de foco exibidas por plotly. Essa é uma ótima abordagem, mas e se você quiser adicionar rapidamente uma coluna de identificação em vez de aperfeiçoar seu gráfico para publicação na Web? Isso é possível adicionando o text argumento ao plot_ly() comando sem especificar hoverinfo = “text”. #Crie um gráfico de dispersão da pontuação do usuário contra a pontuação crítica dos videogames vendidos em 2016. #Mapeie o nome de um videogame para o argumento de texto na plot_ly() camada para adicioná-lo às informações de foco. vgsales2016%&gt;%plot_ly(x=~Critic_Score,y=~User_Score,hoverinfo=&#39;text&#39;,text=~Name)%&gt;%add_markers()%&gt;%layout(title=&#39;Gráfico de dispersão hoverinfo=Name&#39;,xaxis=list(title=&#39;Nota dos Críticos de Videogame&#39;),yaxis=list(title=&#39;Nota dos Usuários de Videogame&#39;)) ## Warning: Ignoring 270 observations 4.3.3 Informações personalizadas Neste exercício, sua tarefa é personalizar as informações de foco instantâneo para ajudar a explorar a relação entre as vendas de videogames na América do Norte e as vendas de videogames na Europa em 2016. Depois de criar o gráfico e as informações de foco personalizado, tente identificar os videogames com a maior discrepância entre as vendas na América do Norte e na Europa. #Personalize a informação em foco text para incluir o nome e o valor para cada uma das seguintes variáveis (na ordem especificada): NA_Sales, EU_Sales, e Name. #Separe o nome e o valor com dois pontos. Por exemplo, a primeira linha deve estar sob a forma: NA_Sales: 41.4. (nome e valor) vgsales2016 %&gt;%plot_ly(x = ~NA_Sales, y = ~EU_Sales,hoverinfo = &quot;text&quot;,text = ~paste(&quot;NA_Sales:&quot;, NA_Sales,&quot;&lt;br&gt;&quot;, &quot;EU_Sales:&quot;,EU_Sales, &quot;&lt;br&gt;&quot;, &quot;Name:&quot;, Name)) %&gt;%add_markers()%&gt;%layout(title=&#39;Gráfico de dispersão hoverinfo=text personalizado&#39;,xaxis=list(title=&#39;Vendas de Videogames na América do Norte&#39;),yaxis=list(title=&#39;Vendas de Videogames na Europa&#39;)) 4.4 Personalizando seu layout 4.4.1 Polindo um gráfico de dispersão Os videogames mais vendidos são geralmente bem recebidos pelos críticos? Para investigar essa pergunta, você criará um gráfico de dispersão da pontuação do crítico em relação às vendas globais. Como você viu, as vendas globais diferem por uma ordem de magnitude na distribuição. Nesses casos, é prudente explorar os dados em uma escala transformada. Neste exercício, exiba vendas globais na escala de log. Como sempre, não se esqueça de usar etiquetas informativas sobre os eixos! #Aplique uma transformação de log ao eixo x dentro do layout() comando. #Rotule o eixo x e o eixo &quot;Global sales (millions of units)&quot; y &quot;Critic score&quot;. vgsales2016 %&gt;% plot_ly(x = ~Global_Sales, y = ~Critic_Score) %&gt;% add_markers(marker = list(opacity = 0.5)) %&gt;% layout(xaxis = list(title=&#39;Global sales (millions of units)&#39;, type = &quot;log&quot;), yaxis = list(title=&#39;Critic score&#39;)) ## Warning: Ignoring 270 observations 4.4.2 Correspondendo a um tema Você já pode ter um tema para seus gráficos que gostaria de replicar plotly. Por exemplo, você pode preferir que seus gráficos de séries temporais tenham: Somente linhas de grade horizontais Um plano de fundo cinza claro (#ebebeb) ao redor da plotagem Neste exercício, sua tarefa é adaptar o gráfico de séries temporais das vendas globais de videogame de 1980 a 2016 para que ele atenda a esses requisitos. #Remova as linhas de grade verticais alterando as xaxis opções. #Defina a cor de fundo para &quot;#ebebeb&quot;. annual_vgsales&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/annual_vgsales.csv&quot;,sep=&#39;;&#39;) annual_vgsales %&gt;% plot_ly(x = ~Year, y = ~Global_Sales) %&gt;% add_lines() %&gt;% layout(xaxis=list(showgrid=F), paper_bgcolor=&quot;#ebebeb&quot;) annual_vgsales %&gt;% plot_ly(x = ~Year, y = ~Global_Sales) %&gt;% add_lines() %&gt;% layout(xaxis=list(showgrid=F), paper_bgcolor=&quot;red&quot;) "],
["graficos-avancados.html", "Chapter 5 Gráficos avançados 5.1 Traços de camadas 5.2 Subparcelas 5.3 Matrizes de gráfico de dispersão 5.4 Gráficos de dispersão em bin", " Chapter 5 Gráficos avançados 5.1 Traços de camadas 5.1.1 Adicionando um linear mais suave Você viu como adicionar senhores LOESS a um gráfico de dispersão usando os traços add_markers() e add_lines(). A adição de um linear mais suave usa a mesma abordagem, mas você usa o lm() comando para ajustar o modelo linear. Neste exercício, sua tarefa é adicionar um linear mais suave a um gráfico de dispersão da pontuação do usuário contra a pontuação crítica dos videogames em 2016. Quando você adiciona smoothers, os valores ausentes NA podem ser problemáticos porque muitas funções de modelagem excluem automaticamente as observações ausentes. Para evitar esse conflito, use select() e na.omit() para excluir as observações antes da plotagem. #Ajuste um modelo de regressão linear usando Critic_Score como variável preditora e User_Score como variável de resposta. Armazene este modelo no objeto m. m&lt;-lm(User_Score~Critic_Score,data=vgsales2016) #Crie um gráfico de dispersão mostrando Critic_Scoreno eixo x e no eixo User_Score y. #Adicione um linear mais suave ao seu gráfico de dispersão representando os valores ajustados. vgsales2016%&gt;%select(User_Score, Critic_Score)%&gt;%na.omit()%&gt;%plot_ly(x=~Critic_Score,y=~User_Score)%&gt;%add_markers()%&gt;%add_lines(y=~fitted(m))%&gt;%layout(title=&#39;Dispersão, selecionando só as variáveis q quero, omitindo NAs e adicionando RegLinear&#39;,xaxis=list(title=&#39;Nota dos críticos&#39;),yaxis=list(title=&#39;Nota dos Usuários&#39;)) rm(m) 5.1.2 Gráficos de densidade sobrepostos Neste exercício, você aprenderá como criar gráficos de densidade e sobrepô-los para comparar a distribuição de pontuações de críticos para três editores de videogame: Activision, Electronic Arts e Nintendo. Para criar um gráfico de densidade para Global_Sales, armazene os resultados do density() comando e passe as coordenadas x e y para add_lines(): d &lt;- density(vgsales2016$Critic_Score, na.rm = TRUE) plot_ly() %&gt;% add_lines(x = ~d$x, y = ~d$y, fill = ‘tozeroy’) %&gt;% layout(xaxis = list(title = ‘Critic score’), yaxis = list(title = ‘Density’)) Observe como você pode criar novos tipos de plotagem facilmente usando código familiar! O fill = ‘tozeroy’ argumento preenche a área abaixo da curva. #Curvas de densidade de computação para Activision, EA, e Nintendo, armazenando-os na d.a, d.e e d.n objectos, respectivamente. Activision&lt;-vgsales%&gt;%filter(Publisher==&#39;Activision&#39;) d.a &lt;-density(Activision$Critic_Score, na.rm = TRUE) rm(Activision) ea&lt;-vgsales%&gt;%filter(Publisher==&#39;Electronic Arts&#39;) d.e&lt;-density(ea$Critic_Score,na.rm=T) rm(ea) nintendo&lt;-vgsales%&gt;%filter(Publisher==&#39;Nintendo&#39;) d.n&lt;-density(nintendo$Critic_Score,na.rm=T) rm(nintendo) #Criar parcelas densidade Overlayed de Critic_Score para activision, ea e nintendo (nessa ordem). plot_ly() %&gt;% add_lines(x = ~d.a$x, y = ~d.a$y, name = &quot;Activision&quot;, fill = &#39;tozeroy&#39;) %&gt;% add_lines(x = ~d.e$x, y = ~d.e$y, name = &quot;Electronic Arts&quot;, fill = &#39;tozeroy&#39;) %&gt;% add_lines(x = ~d.n$x, y = ~d.n$y, name = &quot;Nintendo&quot;, fill = &#39;tozeroy&#39;) %&gt;% layout(title=&#39;Adicionando linhas ao gráfico (densidade) e pintando a área abaixo&#39;,xaxis = list(title = &#39;Critic Score&#39;),yaxis = list(title = &#39;Density&#39;)) rm(d.a,d.e,d.n) 5.2 Subparcelas 5.2.1 Lapidação manual Lembre-se de que o subplot() comando permite combinar gráficos para criar facetas (por exemplo, subtramas ou múltiplos pequenos). Essa é uma ótima maneira de explorar distribuições e relacionamentos entre fatores. Neste exercício, você explorará como a relação entre a pontuação do crítico e a pontuação do usuário muda (ou permanece a mesma) na plataforma. #Crie um gráfico de dispersão mostrando Critic_Score no eixo x e no eixo User_Score y para jogos de PS4. Nomeie o rastreio para a plataforma e armazene esse plot como p1. p1 &lt;- vgsales2016 %&gt;% filter(Platform==&#39;PS4&#39;) %&gt;% plot_ly(x=~Critic_Score, y=~User_Score) %&gt;% add_markers(name = &#39;PS4&#39;) #Crie um gráfico de dispersão mostrando Critic_Scoreno eixo xe no eixo User_Scorey dos videogames XOne. Nomeie o rastreio para a plataforma e armazene esse plot como p2 p2 &lt;- vgsales2016 %&gt;% filter(Platform==&#39;XOne&#39;) %&gt;% plot_ly(x=~Critic_Score,y=~User_Score) %&gt;% add_markers(name=&#39;XOne&#39;) #Use subplot() to create a faceted scatterplot containing p1 and p2 with two rows. subplot(p1, p2, nrows=2)%&gt;%layout(title=&#39;Dispersão, Dois gráficos na mesma Janela&#39;,xaxis=list(title=&#39;Nota dos críticos&#39;),yaxis=list(title=&#39;Nota dos Usuários&#39;)) ## Warning: Ignoring 66 observations ## Warning: Ignoring 27 observations rm(p1,p2) 5.2.2 Facetamento automatizado No exercício anterior, você cria manualmente um gráfico de dispersão facetado. Isso não foi muito entediante, porque você estava focado apenas em dois grupos. No entanto, existem 9 plataformas no vgsales2016 conjunto de dados e seria muito tedioso codificar manualmente 9 gráficos de dispersão. Neste exercício, você praticará o uso dos comandos group_by() e do() para automatizar o processo de criação de um gráfico de dispersão facetado com 12 facetas. Lembre-se de que todo o comando de plotagem está incorporado do(), como mostra o modelo abaixo: data %&gt;% group_by(factor) %&gt;% do( plot = plot_ly(data = ., x = ~x, y = ~y) %&gt;% add_markers(name = ~factor) ) %&gt;% subplot(nrows = R, share #Utilização group_by(), do() e subplot() para criar um gráfico de dispersão que mostra facetada Critic_Score no eixo dos x e User_Score no eixo dos y, em que as facetas são definidos por Platform. #Organize as facetas em uma grade com 3 linhas. vgsales2016 %&gt;% group_by(Platform) %&gt;% do( plot = plot_ly(data = ., x=~Critic_Score, y=~User_Score) %&gt;% add_markers(name = ~Platform)%&gt;%layout(xaxis=list(title=&#39;Nota dos críticos&#39;),yaxis=list(title=&#39;Nota dos Usuários&#39;)) ) %&gt;% subplot(nrows = 3, shareY = TRUE, shareX = TRUE)%&gt;%layout(title=&#39;Dispersão, Vários gráficos na mesma Janela (Atumomatizado)&#39;) ## Warning: Ignoring 36 observations ## Warning: Ignoring 9 observations ## Warning: Ignoring 38 observations ## Warning: Ignoring 66 observations ## Warning: Ignoring 75 observations ## Warning: Ignoring 1 observations ## Warning: Ignoring 5 observations ## Warning: Ignoring 13 observations ## Warning: Ignoring 27 observations 5.2.3 Títulos de plotagem e eixo Nos dois exercícios anteriores, você viu um conjunto de subparcelas sem rótulos de eixo e um conjunto de subparcelas que usavam os nomes de colunas como rótulos de eixo. Por que eles são diferentes? Por padrão, o subplot() comando define titleX = shareX e titleY = shareY; assim, os rótulos dos eixos são exibidos apenas se shareX e/ou shareY são TRUE. Você pode adicionar titleX = TRUE e/ou titleY = TRUE substituir esse comportamento. Neste exemplo, sua tarefa é adicionar títulos às subparcelas. Observe que plotly já foi carregado para você. Nota: Ao executar sua solução, você verá duas mensagens de aviso sobre como ignorar observações. Essas mensagens simplesmente indicam que plotly está ignorando os valores ausentes. p1 &lt;- vgsales2016 %&gt;% filter(Platform==&#39;PS4&#39;) %&gt;% plot_ly(x=~Critic_Score, y=~User_Score) %&gt;% add_markers(name = &#39;PS4&#39;) p2 &lt;- vgsales2016 %&gt;% filter(Platform==&#39;XOne&#39;) %&gt;% plot_ly(x=~Critic_Score,y=~User_Score) %&gt;% add_markers(name=&#39;XOne&#39;) #Adapte o subplot() código para permitir que os títulos dos eixos x e y sejam compartilhados. #Adicione o título &quot;User score vs. critic score by platform, 2016&quot; ao gráfico. subplot(p1, p2, nrows = 2, shareY = TRUE, shareX = TRUE) %&gt;% layout(title=&quot;User score vs. critic score by platform, 2016&quot;) ## Warning: Ignoring 66 observations ## Warning: Ignoring 27 observations rm(p1,p2) 5.2.4 Polindo os títulos dos eixos Os eixos em uma subparcela podem ser renomeados usando o layout() comando, assim como em uma única plotagem; no entanto, existem vários eixos x para renomear. Por exemplo, uma grade 2 x 2 de plotagens requer quatro rótulos do eixo x: p %&gt;% # subplot layout( xaxis = list(title = “title 1”), xaxis2 = list(title = “title 2”), xaxis3 = list(title = “title 3”), xaxis4 = list(title = “title 4”) ) Uma estratégia semelhante vale para os rótulos do eixo y. Neste exemplo, sua tarefa é polir os títulos dos eixos em uma subparcela. #Para a primeira plotagem sp2, use &quot;Global Sales (M units)&quot; o rótulo do eixo y e deixe o rótulo do eixo x em branco. #Para a segunda plotagem sp2, rotule o eixo x e o eixo &quot;Year&quot; y &quot;Global Sales (M units)&quot;. # sp2 %&gt;% # layout( # xaxis = list(title = &quot;&quot;), # xaxis2 = list(title = &quot;Year&quot;), # yaxis = list(title = &quot;Global Sales (M units)&quot;), # yaxis2 = list(title = &quot;Global Sales (M units)&quot;) # ) #Não temos o código sp2 5.3 Matrizes de gráfico de dispersão 5.3.1 Seu primeiro SPLOM Qual a relação entre as vendas de videogame norte-americano e europeu? Como as vendas no Japão se comparam à América do Norte e Europa? Neste exercício, você criará uma matriz de gráficos de dispersão (abreviada como SPLOM) para explorar essas questões com base no vgsales2016 conjunto de dados. #Criar uma matriz de dispersão incluindo NA_Sales, EU_Sales e JP_Sales (nessa ordem). #Rotular os painéis N. America, Europe e Japan, respectivamente. vgsales2016 %&gt;% plot_ly() %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label = &#39;N. America&#39;, values = ~NA_Sales), list(label = &#39;Europe&#39;, values = ~EU_Sales), list(label = &#39;Japan&#39;, values = ~JP_Sales) ) )%&gt;%layout(title=&#39;matriz de gráficos de dispersão (abreviada como SPLOM)&#39;) 5.3.2 Personalizando cores Assim como em um único gráfico de dispersão, pode ser útil adicionar cor para representar uma variável adicional em uma matriz de gráfico de dispersão. Neste exercício, você adicionará cores para representar se o jogo foi produzido pela Nintendo ou não. No código fornecido, uma variável indicadora (ou seja, fictícia) ( nintendo) foi criada para indicar se um jogo foi publicado pela Nintendo ou algum outro editor. #Recrie o SPLOM de NA_Sales, EU_Sales e JP_Sales (nessa ordem). Lembre-se de rotular os painéis N. America, Europe e Japan, respectivamente. #Use cor para representar os valores em nintendo. vgsales2016 %&gt;% mutate(nintendo = ifelse(Publisher == &quot;Nintendo&quot;, &quot;Nintendo&quot;, &quot;Other&quot;)) %&gt;% plot_ly(color=~nintendo) %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label = &#39;N. America&#39;, values = ~NA_Sales), list(label = &#39;Europe&#39;, values = ~EU_Sales), list(label = &#39;Japan&#39;, values = ~JP_Sales) ) )%&gt;%layout(title=&#39;matriz de gráficos de dispersão (abreviada como SPLOM) com corres&#39;) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels 5.3.3 Ajustando a aparência Até agora, você usou as configurações padrão para seus SPLOMs. Agora, apresentaremos duas personalizações comuns para explorar: -Excluindo os painéis diagonais. -Exibindo apenas o triângulo superior ou inferior das plotagens. Ambas as personalizações são implementadas adicionando uma style() camada. Sua tarefa é estilizar seu SPLOM a partir do exercício anterior para explorar como essas personalizações funcionam. #Exclua os gráficos ao longo da diagonal, definindo o diagonal argumento como uma lista configurada visible como FALSE. vgsales2016 %&gt;% mutate(nintendo = ifelse(Publisher == &quot;Nintendo&quot;, &quot;Nintendo&quot;, &quot;Other&quot;)) %&gt;% plot_ly(color=~nintendo) %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label = &#39;N. America&#39;, values = ~NA_Sales), list(label = &#39;Europe&#39;, values = ~EU_Sales), list(label = &#39;Japan&#39;, values = ~JP_Sales) ) )%&gt;%style(diagonal = list(visible = FALSE))%&gt;%layout(title=&#39;matriz de gráficos de dispersão (abreviada como SPLOM) sem diagonal&#39;) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels #Excluir as parcelas na metade superior da matriz, definindo o showupperhalf argumento para FALSE. vgsales2016 %&gt;% mutate(nintendo = ifelse(Publisher == &quot;Nintendo&quot;, &quot;Nintendo&quot;, &quot;Other&quot;)) %&gt;% plot_ly(color=~nintendo) %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label = &#39;N. America&#39;, values = ~NA_Sales), list(label = &#39;Europe&#39;, values = ~EU_Sales), list(label = &#39;Japan&#39;, values = ~JP_Sales) ) )%&gt;%style(showupperhalf = FALSE)%&gt;%layout(title=&#39;matriz de gráficos de dispersão (abreviada como SPLOM) sem metade superior&#39;) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels #Excluir as parcelas na metade inferior da matriz, definindo o showlowerhalf argumento para FALSE vgsales2016 %&gt;% mutate(nintendo = ifelse(Publisher == &quot;Nintendo&quot;, &quot;Nintendo&quot;, &quot;Other&quot;)) %&gt;% plot_ly(color=~nintendo) %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label = &#39;N. America&#39;, values = ~NA_Sales), list(label = &#39;Europe&#39;, values = ~EU_Sales), list(label = &#39;Japan&#39;, values = ~JP_Sales) ) )%&gt;%style(showlowerhalf = FALSE)%&gt;%layout(title=&#39;matriz de gráficos de dispersão (abreviada como SPLOM) sem metade inferior&#39;) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): minimal value for n is 3, returning requested palette with 3 different levels 5.4 Gráficos de dispersão em bin 5.4.1 Binning um gráfico de dispersão O conjunto de dados vgsales contém 16450 casos (linhas), grandes o suficiente para que os gráficos de dispersão em bin ajudem a evitar a plotagem em excesso. Neste exercício, a sua tarefa é criar um gráfico de dispersão binned de User_Score encontro Critic_Score para exibir todo o conjunto de dados. (Lembre-se, até agora, que você só exibiu partes deste conjunto de dados como gráficos de dispersão.) Depois de criar o gráfico, não deixe de explorar a interatividade. Especificamente, observe que a entrada “z” nas informações suspensas corresponde ao número de observações na posição escolhida. #Crie um gráfico de dispersão Critic_Score em bin no eixo xe no eixo User_Score y. #Defina o número de posições nos eixos x e y como 50. vgsales %&gt;% plot_ly(x=~Critic_Score, y=~User_Score) %&gt;% add_histogram2d(nbinsx = 100, nbinsy = 100)%&gt;%layout(title=&#39;Dispersão, Calor e com número de pontos controlado&#39;,xaxis=list(title=&#39;Nota dos críticos&#39;),yaxis=list(title=&#39;Nota dos Usuários&#39;)) "],
["estudo-de-caso.html", "Chapter 6 Estudo de caso 6.1 Introdução aos dados das eleições de 2018 6.2 Mapas de Coropleth 6.3 De polígonos a mapas", " Chapter 6 Estudo de caso 6.1 Introdução aos dados das eleições de 2018 6.1.1 Os eleitores acabaram? Nos Estados Unidos, as eleições de meio de mandato normalmente apresentam menor participação dos eleitores do que as eleições presidenciais. No entanto, com tanto burburinho nas eleições de meio de mandato de 2018, era esperado que a participação fosse maior do que nas eleições de médio prazo anteriores. Foi esse o caso? Sua tarefa é criar um gráfico de dispersão comparando a participação dos eleitores (ou seja, a proporção de eleitores elegíveis que votam) em cada estado entre as eleições de 2014 e 2018. #Crie um gráfico de dispersão exibindo participação em 2014 no eixo x e participação em 2018 no eixo y. #Nomeie o eixo x e o eixo &quot;2014 voter turnout&quot; y &quot;2018 voter turnout&quot;. turnout&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/turnout.csv&quot;,sep=&#39;;&#39;) colnames(turnout) ## [1] &quot;X&quot; &quot;state&quot; &quot;state.abbr&quot; &quot;turnout2018&quot; &quot;turnout2014&quot; ## [6] &quot;ballots&quot; &quot;vep&quot; &quot;vap&quot; turnout %&gt;%plot_ly(x=~turnout2014,y=~turnout2018)%&gt;%add_markers() %&gt;% layout(title=&#39;Participação dos Eleitores em Cada Estado Entre as Eleições de 2014 e 2018&#39;,xaxis = list(title=&#39;2014 voter turnout&#39;),yaxis = list(title=&#39;2018 voter turnout&#39;)) 6.1.2 Adicionando uma linha de referência Embora não tenha sido difícil determinar que proporções mais altas de eleitores elegíveis apareceram em quase todos os estados desde a sua última trama, provavelmente demorou um pouco para você ver isso. As informações suspensas certamente tornam essa tarefa mais fácil, mas a interatividade por si só não é suficiente para tornar essa tarefa “fácil”. Então, como você pode ajudar os leitores a digerir seu gráfico mais rapidamente? Adicionando a linha de referência (y=x). As observações acima dessa linha de referência corresponderão aos estados com maior participação de eleitores em 2018. Em plotly, você pode adicionar uma linha conectando dois pontos usando add_lines(x = c(x1, x2), y = (y1, y2)). Sua tarefa é adicionar a linha de referência (y=x) ao seu gráfico anterior. #Use add_lines() para adicionar uma linha de referência passando pelos pontos (0,25, 0,25) e (0,6, 0,6). #Oculte a legenda adicionada ao gráfico por padrão. turnout %&gt;%plot_ly(x=~turnout2014,y=~turnout2018)%&gt;%add_markers() %&gt;%add_lines(x =c(0.25, 0.6) , y = c(0.25, 0.6)) %&gt;% layout(title=&#39;Participação dos Eleitores em Cada Estado Entre as Eleições de 2014 e 2018&#39;,xaxis = list(title=&#39;2014 voter turnout&#39;),yaxis = list(title=&#39;2018 voter turnout&#39;))%&gt;% layout(showlegend=F) 6.1.3 Qual estado teve a maior participação? As informações de foco instantâneo no gráfico de dispersão anterior permitem determinar qual estado teve a maior participação, mas leva um tempo considerável para comparar a participação entre os estados. Neste exercício, sua tarefa é criar um gráfico de dispersão exibindo o estado no eixo y e a participação dos eleitores no eixo x. Os gráficos de dispersão que exibem uma variável categórica e uma quantitativa são freqüentemente chamados de gráficos de pontos e permitem comparações mais rápidas entre os grupos. O turnout conjunto de dados contém informações sobre a proporção de eleitores elegíveis (turnout) que votaram nas eleições de meio de mandato de 2018 em cada um state. No código de amostra, turnout %&gt;% top_n(15, wt = turnout) extrai os 15 estados com as maiores taxas de participação. (top10,top15, maiores) #Para os 15 principais estados, crie um gráfico de pontos (por exemplo, gráfico de dispersão) exibido turnout2018 no eixo x e no eixo state y, onde statefoi reordenado turnout2018. #Título do eixo x &quot;Eligible voter turnout&quot;. #Nomeie o eixo y &quot;State&quot;e defina-o type como category turnout %&gt;% top_n(15, wt = turnout2018) %&gt;% plot_ly(x = ~turnout2018, y = ~fct_reorder(state,turnout2018)) %&gt;% add_markers() %&gt;% layout(title=&#39;15 Estados com as Maiores Taxas de Participação em 2018&#39;,xaxis=list(title=&#39;Eligible voter turnout&#39;), yaxis=list(title=&#39;State&#39;,type=&#39;category&#39;)) 6.1.4 Quanto foi gasto nas corridas do Senado? O controle do Senado estava em disputa nas eleições de meio de 2018 e, juntamente com a capacidade do presidente Trump de moldar o ramo judicial do governo. Ambos os partidos lutaram arduamente para controlar essa câmara do Congresso, então como isso se traduziu em captação de recursos? Um primeiro passo para entender esta questão é visualizar a distribuição dos fundos recebidos pelos candidatos ao Senado. Sua tarefa é criar um histograma de exibição da distribuição dos fundos recebidos pelos candidatos do Senado durante o ciclo eleitoral de 2018. Quando terminar, tente identificar a corrida com o mais alto nível de captação de recursos. #Filtre para extrair apenas as corridas do escritório do Senado (designadas por &quot;S&quot;). #Crie um histograma de receipts. #Adicione o título &quot;Fundraising for 2018 Senate races&quot; e intitule o eixo x &quot;Total contributions received&quot;. fundraising&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/fundraising.csv&quot;,sep=&#39;;&#39;) fundraising%&gt;%filter(office==&#39;S&#39;)%&gt;%plot_ly(x=~receipts)%&gt;%add_histogram()%&gt;%layout(title=&#39;Fundraising for 2018 Senate races&#39;,xaxis=list(title=&#39;Total contributions received&#39;)) 6.1.5 Qual candidato gastou mais? Como você viu, a maioria das campanhas do Senado arrecadou abaixo de US1 milhão e a grande maioria arrecadou abaixo de US20 milhões. Então, quais raças aumentaram esses montantes astronômicos? Histogramas bin observações, obscurecendo a fácil identificação de candidatos individuais, portanto é necessário um gráfico diferente para explorar esta questão. Sua tarefa é criar um gráfico de pontos das 15 campanhas do Senado que levantaram mais dinheiro durante o ciclo eleitoral de 2018. Você também precisará personalizar as informações de foco instantâneo para facilitar a identificação fácil dos candidatos. Concentre-se primeiro na criação do gráfico, mas não deixe de revisar como as informações de foco foram personalizadas! #Use top_n() para extrair os casos correspondentes às 15 campanhas do Senado que levantaram mais dinheiro. #Para as 15 principais campanhas, crie um gráfico de pontos (por exemplo, gráfico de dispersão) exibido receiptsno eixo x e no eixo state y, onde state foi reordenado receipts. #Altere as cores para que o azul represente democratas (DEM) e o vermelho represente republicanos (REP) fundraising$receipts&lt;-as.numeric(fundraising$receipts) fundraising %&gt;% filter(office == &quot;S&quot;) %&gt;% top_n(15, wt = receipts) %&gt;% plot_ly(x = ~receipts, y = ~fct_reorder(state, receipts), color = ~fct_drop(party), hoverinfo = &quot;text&quot;, text = ~paste(&quot;Candidate:&quot;, name, &quot;&lt;br&gt;&quot;, &quot;Party:&quot;, party, &quot;&lt;br&gt;&quot;, &quot;Receipts:&quot;, receipts, &quot;&lt;br&gt;&quot;, &quot;Disbursements:&quot;, disbursement)) %&gt;% add_markers(colors = c(&quot;blue&quot;, &quot;red&quot;))%&gt;%layout(title=&#39;15 campanhas do Senado que levantaram mais dinheiro durante o ciclo eleitoral de 2018&#39;,xaxis=list(title=&#39;Receita&#39;), yaxis=list(title=&#39;Stado&#39;)) 6.2 Mapas de Coropleth 6.2.1 Mapeando a mudança na participação dos eleitores Você já viu que a participação dos eleitores aumentou em quase todos os estados nas eleições de meio de 2018, em comparação com as de 2014. Neste exercício, sua tarefa é mapear a mudança na participação dos eleitores entre essas duas eleições de meio de mandato. #Use mutate()para adicionar uma change coluna a turnout, que é calculada como a diferença entre a participação em 2018 (turnout2018) e 2014 (turnout2014). #Use plot_geo() e add_trace() para criar um mapa detalhado da mudança na participação dos eleitores por estado, mapeando change para z e state.abbr para locations. #Restrinja o escopo do mapa ao &#39;usa&#39; uso layout(). turnout %&gt;% mutate(change=turnout2018-turnout2014) %&gt;% plot_geo(locationmode = &#39;USA-states&#39;) %&gt;% add_trace(z=~change, locations=~state.abbr) %&gt;% layout(geo = list(scope = &#39;usa&#39;)) 6.2.2 Mapeando vencedores do Senado Havia 33 cadeiras no Senado em disputa nas eleições de 2018 (mais duas eleições especiais que ignoraremos neste exercício). Sua tarefa é criar um mapa de cores usando o partido político do candidato vencedor para colorir no estado. Esta tarefa requer que você mapeie um fator para a cor de preenchimento. No entanto, a z estética espera uma variável numérica. Uma solução fácil é converter party para uma variável numérica as.numeric(party) e especificar manualmente as cores desejadas add_trace(). Além disso, a barra de cores não é mais muito útil e pode ser removida adicionando a camada hide_colorbar(). #Crie um mapa de onde a cor do estado representa a parte vencedora. #Em add_trace(), especificar manualmente as cores &quot;dodgerblue&quot;, &quot;mediumseagreen&quot;e &quot;tomato&quot;(nessa ordem). #Preencha o texto de informações instantâneas com os nomes de coluna apropriados. senate_winners&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/senate_winners.csv&quot;,sep=&#39;;&#39;) senate_winners %&gt;% plot_geo(locationmode = &#39;USA-states&#39;) %&gt;% add_trace(z=~as.numeric(party), locations= ~state, colors = c(&quot;dodgerblue&quot;, &quot;mediumseagreen&quot;, &quot;tomato&quot;), hoverinfo = &quot;text&quot;, text = ~paste(&quot;Candidate:&quot;, name, &quot;&lt;br&gt;&quot;, &quot;Party:&quot;, party, &quot;&lt;br&gt;&quot;, &quot;% vote:&quot;, round(as.numeric(pct.vote), 1)) ) %&gt;% layout(geo = list(scope = &#39;usa&#39;)) %&gt;% hide_colorbar() 6.2.3 Adicionando pontos a um mapa Os mapas criados usando plot_geo() ainda são objetos de plotagem, para que você possa adicionar camadas adicionais como antes. Neste exercício, você adicionará pontos a um mapa dos Estados Unidos representando os locais em que o presidente Trump realizou comícios para as eleições de meio de mandato de 2018. O conjunto de dados rallies2018 contém a data, cidade, estado, latitude, longitude e número de pessoas que falaram. #Use add_markers() para adicionar pontos representando os comícios no mapa dos EUA. Certifique-se de mapear long para o eixo x, o eixo lat y e no.speakers o tamanho dos pontos. #Adicione o título &quot;2018 Trump Rallies&quot;. #Restrinja o escopo do mapa ao &#39;usa&#39;. rallies2018&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/rallies2018.csv&quot;,sep=&#39;;&#39;) rallies2018 %&gt;% plot_geo(locationmode = &#39;USA-states&#39;) %&gt;% add_markers( x=~long, y=~lat, size=~no.speakers, hoverinfo = &quot;text&quot;, text = ~paste(city, state, sep = &quot;,&quot;) ) %&gt;% layout(title = &#39;2018 Trump Rallies&#39;, geo = list(scope = &#39;usa&#39;)) ## Warning: `line.width` does not currently support multiple values. 6.2.4 Layout geográfico No exercício anterior você viu as configurações padrão para o layout geo no plotly, mas isso é muito fácil de personalizar especificando argumentos adicionais na lista passada para geo nos layout(). Neste exercício, você explorará algumas opções úteis descritas abaixo: Para alterar a cor da massa terrestre, adicione os argumentos showland = TRUE e defina a landcolor. Para diferenciar lagos de massas terrestres, adicione os argumentos showlakes = TRUE e defina a lakecolor. Para exibir estados/províncias, conjunto showsubunit = TRUE e o conjunto subunitcolor. Para exibir países, conjunto showcountries = TRUE e o conjunto countrycolor. Observe que você deve usar a toRGB() função para passar as cores R para o layout geográfico. #Personalize a aparência do seu mapa a partir do exercício anterior, definindo a lista g e passando-a para o geo layout: #Defina a cor da massa terrestre com &quot;gray90&quot;. #Defina a cor do lago com &quot;white&quot;. #Defina a cor do estado (subunidade) com &quot;white&quot;. g &lt;- list(scope = &#39;usa&#39;, showland = T, landcolor = toRGB(&quot;gray90&quot;), showlakes = T, lakecolor = toRGB(&quot;white&quot;), showsubunit = T, subunitcolor = toRGB(&quot;white&quot;)) # Apply the geo layout to the map rallies2018 %&gt;% plot_geo(locationmode = &#39;USA-states&#39;) %&gt;% add_markers( x = ~long, y = ~lat, size = ~no.speakers, hoverinfo = &quot;text&quot;, text = ~paste(city, state, sep = &quot;,&quot;) ) %&gt;% layout(title = &quot;2018 Trump Rallies&quot;, geo = g) ## Warning: `line.width` does not currently support multiple values. rm(g) 6.3 De polígonos a mapas 6.3.1 Mapeando vencedores do Senado, redux Na última lição, você criou um mapa de choropleth para os resultados do Senado usando plot_geo() algumas soluções alternativas. Neste exercício, sua tarefa é recriar esse mapa a partir de polígonos. Ou seja, crie um mapa dos EUA a partir de polígonos e preencha os estados com base no vencedor da corrida no Senado. O senate_map quadro de dados e plotly já foi carregado para você. senate_map contém as informações que você viu anteriormente, juntamente com as informações de limite necessárias para desenhar polígonos de estado. #Crie um mapa choropleth no nível de estado para o qual party é mapeado color e para o qual region é mapeado split. #Especifique que as linhas de limite devem ter width = 0.4 e que a legenda não deve ser mostrada. senate_map&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/senate_map.csv&quot;,sep=&#39;;&#39;) senate_map %&gt;% group_by(group) %&gt;% plot_ly(x=~long, y=~lat, color=~party, split=~region) %&gt;% add_polygons(line = list(width = 0.4), showlegend = FALSE) #Definir as cores de polígono para &quot;dodgerblue&quot;, &quot;mediumseagreen&quot;e &quot;tomato&quot;na plot_ly()camada. #Para desenhar os limites dos estados com NAs para party(ou seja, um estado sem uma corrida no Senado), altere a cor das linhas com toRGB(&quot;gray60&quot;). senate_map %&gt;% group_by(group) %&gt;% plot_ly(x = ~long, y = ~lat, color = ~party, split = ~region, colors=c(&quot;dodgerblue&quot;, &quot;mediumseagreen&quot;,&quot;tomato&quot;)) %&gt;% add_polygons(line = list(width = 0.4, color=toRGB(&quot;gray60&quot;)), showlegend = FALSE) #Para simplificar seu código, defina as opções de layout para remover os títulos dos eixos, a grade, as linhas zero e as marcas de escala como a lista map_axese depois passe essa lista para xaxise yaxis. Complete o código para fazer isso. map_axes &lt;- list(title=&#39;&#39;,showlegend=F,zeroline=F,showgrid=F) senate_map %&gt;% group_by(group) %&gt;% plot_ly(x = ~long, y = ~lat, color = ~party, split = ~region, colors = c(&quot;dodgerblue&quot;, &quot;mediumseagreen&quot;, &quot;tomato&quot;)) %&gt;% add_polygons(line = list(width = 0.4, color = toRGB(&quot;gray60&quot;)), showlegend = FALSE) %&gt;% layout(xaxis=map_axes, yaxis=map_axes) 6.3.2 Um mapa choropleth em nível de condado A disputa do Senado na Flórida em 2018 foi extremamente controversa e não foi resolvida na noite das eleições. A corrida estava perto demais para ser convocada, e o processo de recontagem foi tão controverso quanto a corrida, com acusações de cédulas mal projetadas que lembram a infame cédula de borboleta nas eleições presidenciais de 2000 e uma série de desafios legais. Neste exercício, sua tarefa é criar um mapa de coropletas no nível do condado da porcentagem dos votos de dois partidos que o candidato republicano Rick Scott (o vencedor final da corrida) recebeu de acordo com o primeiro conjunto de resultados (pré- -recontagem). Os resultados estão em fl_results e os limites do condado estão em fl_boundaries. #Junte os quadros de dados fl_boundaries e fl_results (nessa ordem). fl_boundaries e fl_results ter diferentes nomes de colunas para os municípios, assim você terá para mapear subregio na CountyName. fl_boundaries&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/fl_boundaries.csv&quot;,sep=&#39;;&#39;) fl_results&lt;-read.csv(&quot;C:/Users/Computador/Desktop/Projetos no R/Datasets/fl_results.csv&quot;,sep=&#39;;&#39;) senate_vote &lt;- left_join(fl_boundaries, fl_results, by = c(&quot;subregion&quot; = &quot;CountyName&quot;)) #Crie um mapa choropleth no nível do condado, onde os condados sejam coloridos pela porcentagem de eleitores que votaram em Rick Scott. #Especifique que as linhas de limite devem ter uma largura de 0,4 e que a legenda não deve ser mostrada. senate_vote %&gt;% group_by(group) %&gt;% plot_ly(x = ~as.numeric(long), y = ~as.numeric(lat), color = ~Pctvote, split = ~subregion) %&gt;% add_polygons(line = list(width=0.4), showlegend=F, colors = c(&quot;blue&quot;, &quot;red&quot;)) #Defina as configurações de layout do eixo map_axes para remover os títulos, linhas de grade, linhas zero e marcas de escala e passar essa lista para os layouts xaxis e yaxis map_axes &lt;- list(title=&#39;&#39;,showlegend=F,zeroline=F,showgrid=F) senate_vote %&gt;% group_by(group) %&gt;% plot_ly(x = ~as.numeric(long), y = ~as.numeric(lat), color = ~Pctvote, split = ~subregion) %&gt;% add_polygons(line = list(width = 0.4), showlegend = FALSE, colors = c(&quot;blue&quot;, &quot;red&quot;)) %&gt;% layout(xaxis = map_axes, yaxis = map_axes) "]
]
